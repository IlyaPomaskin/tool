import AppKit
import HotKey
import OpenAI

@MainActor
class AppDelegate: NSObject, NSApplicationDelegate {
    var recordingHotKey = HotKey(key: .m, modifiers: [.control, .option, .command])
    var screenshotHotKey = HotKey(key: .b, modifiers: [.control, .option, .command])
    var audioRecorder = AudioRecorder()
    var openAIService = OpenAIService()
    var screenshotCapture = ScreenshotCapture()
    var ocrService = OCRService()
    var capturedWindowImage: NSImage?
    
    var statusItem: NSStatusItem!
    var menuBarMenu: NSMenu!
    var popoverService = PopoverService()
    
    func applicationDidFinishLaunching(_ notification: Notification) {
        setupGlobalHotkeys()
        
        setupMenuBar()
    }
    
    func setupGlobalHotkeys() {
        recordingHotKey.keyDownHandler = { [weak self] in
            // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –∑–≤—É–∫–∞ —Å—Ä–∞–∑—É –∂–µ
            self?.audioRecorder.startRecording()
            
            // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            Task {
                self?.capturedWindowImage = await self?.screenshotCapture.screenshotFocusedWindow(compress: true)
            }
        }
        
        recordingHotKey.keyUpHandler = { [weak self] in
            Task {
                await self?.processRecording()
            }
        }

        screenshotHotKey.keyDownHandler = { [weak self] in
            Task {
                if let image = await self?.screenshotCapture.screenshotRegion() {
                    await self?.processScreenshotImage(image)
                }
            }
        }
    }
    
    func processRecording() async {
        guard let statusItem = statusItem,
              let button = statusItem.button else { return }
        
        do {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –ø–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞
            let fileURL = audioRecorder.stopRecording()
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
            self.popoverService.addMessage("üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...", relativeTo: button)
            
            // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            let transcription = try await openAIService.transcribeAudio(from: fileURL)
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            self.popoverService.addMessage("üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n\n\(transcription)", relativeTo: button)
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI (—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å)
            let response: String

            if let windowImage = capturedWindowImage {
                response = try await openAIService.callResponseAPI(with: transcription, instructions: Constants.Prompts.translator, image: windowImage)
            } else {
                response = try await openAIService.callResponseAPI(with: transcription)
            }

            self.popoverService.addMessage("ü§ñ –û—Ç–≤–µ—Ç:\n\n\(response)", relativeTo: button)
            self.capturedWindowImage = nil
            
        } catch {
            self.popoverService.addMessage("‚ùå –û—à–∏–±–∫–∞:\n\n\(error.localizedDescription)", relativeTo: button)
        }
    }
    
    
    func setupMenuBar() {
        // –°–æ–∑–¥–∞–µ–º status item –≤ menu bar
        statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.squareLength)
        
        // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        if let button = statusItem.button {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–∫–æ–Ω–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            button.image = NSImage(systemSymbolName: "tuningfork", accessibilityDescription: "Mic GPT")
            button.image?.size = NSSize(width: 18, height: 18)
            button.target = self
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        menuBarMenu = NSMenu()
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        let titleItem = NSMenuItem(title: "Mic GPT", action: nil, keyEquivalent: "")
        titleItem.isEnabled = false
        menuBarMenu.addItem(titleItem)
        
        menuBarMenu.addItem(NSMenuItem.separator())
        
        // –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞
        let recordItem = NSMenuItem(title: "üé§ GPT: Control + Option + Command + M", action: nil, keyEquivalent: "")
        recordItem.target = self
        menuBarMenu.addItem(recordItem)
        
        // –°–∫—Ä–∏–Ω—à–æ—Ç
        let screenshotItem = NSMenuItem(title: "üì∏ OCR: Control + Option + Command + B", action: nil, keyEquivalent: "")
        screenshotItem.target = self
        menuBarMenu.addItem(screenshotItem)
        
        menuBarMenu.addItem(NSMenuItem.separator())
        
        // –í—ã—Ö–æ–¥
        let quitItem = NSMenuItem(title: "–í—ã—Ö–æ–¥", action: #selector(quitApp), keyEquivalent: "q")
        quitItem.target = self
        menuBarMenu.addItem(quitItem)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é
        statusItem.menu = menuBarMenu
    }

    private func processScreenshotImage(_ image: NSImage) async {
        do {
            let extractedText = try await ocrService.extractText(from: image)
            print("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \(extractedText)")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            let pasteboard = NSPasteboard.general
            pasteboard.clearContents()
            pasteboard.setString(extractedText, forType: .string)
            
            await MainActor.run {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popover —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ OCR
                if let button = self.statusItem.button {
                    self.popoverService.showOCRResult(extractedText, relativeTo: button)
                }
            }
        } catch {
            print("–û—à–∏–±–∫–∞ OCR: \(error.localizedDescription)")
            let errorMessage = "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: \(error.localizedDescription)"
            
            await MainActor.run {
                if let button = self.statusItem.button {
                    self.popoverService.showOCRResult(errorMessage, relativeTo: button)
                }
            }
        }
    }
    
    @objc func quitApp() {
        NSApplication.shared.terminate(nil)
    }
    
    func applicationShouldTerminateAfterLastWindowClosed(_ sender: NSApplication) -> Bool {
        return false // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ menu bar
    }
}


// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
let app = NSApplication.shared
let delegate = AppDelegate()
app.delegate = delegate
app.run()

