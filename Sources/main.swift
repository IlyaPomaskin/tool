import AppKit
import HotKey
import OpenAI

@MainActor
class AppDelegate: NSObject, NSApplicationDelegate {
    var window: NSWindow!
    var textLabel: NSTextField!
    var hotKey: HotKey?
    var screenshotHotKey: HotKey?
    var audioRecorder: AudioRecorder!
    var openAIService: OpenAIService!
    var screenshotCapture: ScreenshotCapture!
    var capturedWindowImage: NSImage?
    
    // Menu bar
    var statusItem: NSStatusItem!
    var menuBarMenu: NSMenu!
    
    func applicationDidFinishLaunching(_ notification: Notification) {
        // –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        window = NSWindow(
            contentRect: NSRect(x: 0, y: 0, width: 500, height: 400),
            styleMask: [.titled, .closable, .miniaturizable, .resizable],
            backing: .buffered,
            defer: false
        )
        
        window.title = "Mic GPT - –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫"
        window.center()
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        textLabel = NSTextField(frame: NSRect(x: 50, y: 50, width: 400, height: 200))
        textLabel.stringValue = "–ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ Control + Option + Command + M –¥–ª—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞\n\n–ù–∞–∂–º–∏—Ç–µ Control + Option + Command + B –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞\n\n–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å..."
        textLabel.isEditable = false
        textLabel.isSelectable = true
        textLabel.font = NSFont.systemFont(ofSize: 14)
        textLabel.textColor = NSColor.labelColor
        textLabel.backgroundColor = NSColor.controlBackgroundColor
        textLabel.alignment = .left
        textLabel.maximumNumberOfLines = 0
        textLabel.cell?.wraps = true
        textLabel.cell?.isScrollable = true
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–∫–Ω–æ
        window.contentView?.addSubview(textLabel)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∏ –≤—ã–≤–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
        window.makeKeyAndOrderFront(nil)
        NSApp.activate(ignoringOtherApps: true)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ä–µ–∫–æ—Ä–¥–µ—Ä
        setupAudioRecorder()
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö–æ—Ç–∫–µ–∏
        setupGlobalHotkeys()
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OCR
        setupOCRHandler()
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º menu bar
        setupMenuBar()
    }
    
    func setupAudioRecorder() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        audioRecorder = AudioRecorder()
        openAIService = OpenAIService()
        screenshotCapture = ScreenshotCapture()
    }
    
    func setupGlobalHotkeys() {
        // –°–æ–∑–¥–∞–µ–º —Ö–æ—Ç–∫–µ–π Control + Option + Command + M –¥–ª—è –∑–∞–ø–∏—Å–∏
        hotKey = HotKey(key: .m, modifiers: [.control, .option, .command])
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏
        hotKey?.keyDownHandler = { [weak self] in
            // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –∑–≤—É–∫–∞ —Å—Ä–∞–∑—É –∂–µ
            self?.audioRecorder.startRecording()
            
            // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            Task {
                if let screenshotCapture = self?.screenshotCapture {
                    self?.capturedWindowImage = await screenshotCapture.captureFocusedWindow()
                }
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏
        hotKey?.keyUpHandler = { [weak self] in
            Task {
                await self?.processRecording()
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ö–æ—Ç–∫–µ–π Control + Option + Command + B –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        screenshotHotKey = HotKey(key: .b, modifiers: [.control, .option, .command])
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        screenshotHotKey?.keyDownHandler = { [weak self] in
            self?.screenshotCapture.startScreenshot()
        }
    }
    
    func processRecording() async {
        guard let audioRecorder = audioRecorder,
              let openAIService = openAIService else { return }
        
        do {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –ø–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞
            let fileURL = audioRecorder.stopRecording()
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            await MainActor.run {
                self.textLabel.stringValue = "üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ..."
            }
            
            // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            let transcription = try await openAIService.transcribeAudio(from: fileURL)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
            await MainActor.run {
                self.textLabel.stringValue = "üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:\n\n\(transcription)"
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI (—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å)
            let response: String
            if let windowImage = capturedWindowImage {
                // –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                if let compressedImage = screenshotCapture.compressImageForOpenAI(windowImage) {
                    response = try await openAIService.callResponseAPI(with: transcription, instructions: Constants.Prompts.translator, image: compressedImage)
                } else {
                    response = try await openAIService.callResponseAPI(with: transcription)
                }
            } else {
                response = try await openAIService.callResponseAPI(with: transcription)
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –æ—Ç–≤–µ—Ç–æ–º
            await MainActor.run {
                self.textLabel.stringValue = "ü§ñ –û—Ç–≤–µ—Ç:\n\n\(response)"
                // –û—á–∏—â–∞–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                self.capturedWindowImage = nil
            }
            
        } catch {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
            await MainActor.run {
                self.textLabel.stringValue = "‚ùå –û—à–∏–±–∫–∞:\n\n\(error.localizedDescription)"
            }
        }
    }
    
    func setupOCRHandler() {
        screenshotCapture.onTextExtracted = { [weak self] extractedText in
            Task { @MainActor in
                self?.textLabel.stringValue = "üì∏ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n\(extractedText)"
            }
        }
    }
    
    func setupMenuBar() {
        // –°–æ–∑–¥–∞–µ–º status item –≤ menu bar
        statusItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.squareLength)
        
        // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        if let button = statusItem.button {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–∫–æ–Ω–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            button.image = NSImage(systemSymbolName: "tuningfork", accessibilityDescription: "Mic GPT")
            button.image?.size = NSSize(width: 18, height: 18)
            button.action = #selector(menuBarButtonClicked)
            button.target = self
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        menuBarMenu = NSMenu()
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        let titleItem = NSMenuItem(title: "Mic GPT", action: nil, keyEquivalent: "")
        titleItem.isEnabled = false
        menuBarMenu.addItem(titleItem)
        
        menuBarMenu.addItem(NSMenuItem.separator())
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ
        let showWindowItem = NSMenuItem(title: "–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ", action: #selector(showWindow), keyEquivalent: "")
        showWindowItem.target = self
        menuBarMenu.addItem(showWindowItem)
        
        menuBarMenu.addItem(NSMenuItem.separator())
        
        // –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞
        let recordItem = NSMenuItem(title: "üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å", action: #selector(startRecording), keyEquivalent: "")
        recordItem.target = self
        menuBarMenu.addItem(recordItem)
        
        // –°–∫—Ä–∏–Ω—à–æ—Ç
        let screenshotItem = NSMenuItem(title: "üì∏ –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", action: #selector(takeScreenshot), keyEquivalent: "")
        screenshotItem.target = self
        menuBarMenu.addItem(screenshotItem)
        
        menuBarMenu.addItem(NSMenuItem.separator())
        
        // –í—ã—Ö–æ–¥
        let quitItem = NSMenuItem(title: "–í—ã—Ö–æ–¥", action: #selector(quitApp), keyEquivalent: "q")
        quitItem.target = self
        menuBarMenu.addItem(quitItem)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é
        statusItem.menu = menuBarMenu
    }
    
    @objc func menuBarButtonClicked() {
        // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é (—É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    }
    
    @objc func showWindow() {
        window.makeKeyAndOrderFront(nil)
        NSApp.activate(ignoringOtherApps: true)
    }
    
    @objc func startRecording() {
        // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞
        audioRecorder.startRecording()
        
        // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        Task {
            if let screenshotCapture = screenshotCapture {
                capturedWindowImage = await screenshotCapture.captureFocusedWindow()
            }
        }
    }
    
    @objc func takeScreenshot() {
        screenshotCapture.startScreenshot()
    }
    
    @objc func quitApp() {
        NSApplication.shared.terminate(nil)
    }
    
    func applicationShouldTerminateAfterLastWindowClosed(_ sender: NSApplication) -> Bool {
        return false // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ menu bar
    }
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
let app = NSApplication.shared
let delegate = AppDelegate()
app.delegate = delegate
app.run()

