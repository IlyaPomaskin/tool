import Foundation
import AppKit
import CoreGraphics
import CoreFoundation

@MainActor
class ScreenshotCapture: NSObject {
    var ocrService: OCRService
    var onTextExtracted: ((String) -> Void)?
    
    override init() {
        self.ocrService = OCRService()
        super.init()
    }
    
    func startScreenshot() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        captureScreenshotWithSystemCommand()
    }
    
    func captureFocusedWindow() async -> NSImage? {
        return await withCheckedContinuation { continuation in
            // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—Ä–∞–∑—É (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫)
            if let windowID = self.getActiveWindowID() {
                print("üîç –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å ID: \(windowID)")
                
                // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—Ä–µ–º—è –∑–∞—Ö–≤–∞—Ç–∞
                NSApp.hide(nil)
                
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É screencapture —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º window ID –∏ —Å–∂–∞—Ç–∏–µ–º
                    let process = Process()
                    process.executableURL = URL(fileURLWithPath: "/usr/sbin/screencapture")
                    process.arguments = ["-l", "\(windowID)", "-c", "-x", "-t", "jpg"] // -t jpg –¥–ª—è —Å–∂–∞—Ç–∏—è
                    
                    do {
                        try process.run()
                        process.waitUntilExit()
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
                        DispatchQueue.main.async {
                            NSApp.activate(ignoringOtherApps: true)
                            
                            // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
                            if let pasteboard = NSPasteboard.general.data(forType: .tiff),
                               let image = NSImage(data: pasteboard) {
                                
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                self.saveDebugScreenshot(image: image, filename: "debug_focused_window.png")
                                
                                continuation.resume(returning: image)
                            } else {
                                continuation.resume(returning: nil)
                            }
                        }
                    } catch {
                        print("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è screencapture: \(error)")
                        DispatchQueue.main.async {
                            NSApp.activate(ignoringOtherApps: true)
                            continuation.resume(returning: nil)
                        }
                    }
                }
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞")
                continuation.resume(returning: nil)
            }
        }
    }
    
    private func getActiveWindowID() -> CGWindowID? {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–∫–æ–Ω
        guard let windowList = CGWindowListCopyWindowInfo(.optionOnScreenOnly, kCGNullWindowID) as? [[String: Any]] else {
            return nil
        }
        
        var candidateWindows: [(CGWindowID, String, Double, Double)] = []
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –æ–∫–Ω–∞
        for windowInfo in windowList {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∫–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é (–Ω–µ –Ω–∞—à–µ–º—É)
            if let ownerName = windowInfo[kCGWindowOwnerName as String] as? String,
               ownerName != "mic-gpt" { // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∫–Ω–æ –≤–∏–¥–∏–º–æ –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä
                if let bounds = windowInfo[kCGWindowBounds as String] as? [String: Any],
                   let width = bounds["Width"] as? Double,
                   let height = bounds["Height"] as? Double,
                   width > 100 && height > 100 { // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–∫–Ω–∞ (–∏—Å–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –æ–∫–Ω–∞)
                    if let layer = windowInfo[kCGWindowLayer as String] as? Int,
                       layer == 0 { // 0 = –æ–±—ã—á–Ω–æ–µ –æ–∫–Ω–æ
                        
                        if let windowID = windowInfo[kCGWindowNumber as String] as? CGWindowID {
                            candidateWindows.append((windowID, ownerName, width, height))
                        }
                    }
                }
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–∫–Ω–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É (–±–æ–ª—å—à–∏–µ –æ–∫–Ω–∞ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        candidateWindows.sort { $0.2 * $0.3 > $1.2 * $1.3 }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –æ–∫–Ω–æ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ)
        if let bestWindow = candidateWindows.first {
            print("üì± –í—ã–±—Ä–∞–Ω–æ –æ–∫–Ω–æ: \(bestWindow.1), ID: \(bestWindow.0), —Ä–∞–∑–º–µ—Ä: \(Int(bestWindow.2))x\(Int(bestWindow.3))")
            return bestWindow.0
        }
        
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–∫–æ–Ω")
        return nil
    }
    
    private func captureScreenshotWithSystemCommand() {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        NSApp.hide(nil)
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É screencapture
            let process = Process()
            process.executableURL = URL(fileURLWithPath: "/usr/sbin/screencapture")
            process.arguments = ["-i", "-c", "-x"]
            
            do {
                try process.run()
                process.waitUntilExit()
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
                DispatchQueue.main.async {
                    NSApp.activate(ignoringOtherApps: true)
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º OCR
                    self.saveFromClipboardAndExtractText()
                }
            } catch {
                print("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è screencapture: \(error)")
                DispatchQueue.main.async {
                    NSApp.activate(ignoringOtherApps: true)
                }
            }
        }
    }
    
    private func saveFromClipboardAndExtractText() {
        guard let pasteboard = NSPasteboard.general.data(forType: .tiff),
              let image = NSImage(data: pasteboard) else {
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞")
            return
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        saveDebugScreenshot(image: image, filename: "debug_screenshot.png")
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º OCR –Ω–∞–ø—Ä—è–º—É—é —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
        Task {
            await extractTextFromScreenshot(image: image)
        }
    }
    
    private func extractTextFromScreenshot(image: NSImage) async {
        do {
            let extractedText = try await ocrService.extractText(from: image)
            print("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \(extractedText)")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            saveTextToClipboard(extractedText)
            
            // –í—ã–∑—ã–≤–∞–µ–º callback —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            onTextExtracted?(extractedText)
            
        } catch {
            print("–û—à–∏–±–∫–∞ OCR: \(error.localizedDescription)")
            let errorMessage = "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: \(error.localizedDescription)"
            saveTextToClipboard(errorMessage)
            onTextExtracted?(errorMessage)
        }
    }
    
    private func saveTextToClipboard(_ text: String) {
        let pasteboard = NSPasteboard.general
        pasteboard.clearContents()
        pasteboard.setString(text, forType: .string)
        print("–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
    }
    
    private func saveDebugScreenshot(image: NSImage, filename: String) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG
        guard let tiffData = image.tiffRepresentation,
              let bitmapRep = NSBitmapImageRep(data: tiffData),
              let pngData = bitmapRep.representation(using: .png, properties: [:]) else {
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PNG –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
            return
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        let fileURL = URL(fileURLWithPath: FileManager.default.currentDirectoryPath)
            .appendingPathComponent(filename)
        
        do {
            try pngData.write(to: fileURL)
            print("üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: \(fileURL.path)")
        } catch {
            print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: \(error)")
        }
    }
    
    func compressImageForOpenAI(_ image: NSImage) -> NSImage? {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let originalSize = image.size
        print("üìè –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(Int(originalSize.width))x\(Int(originalSize.height))")
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (OpenAI —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –¥–æ 2048x2048)
        let maxDimension: CGFloat = 1024 // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∂–∞—Ç–∏—è
        let scale: CGFloat
        
        if originalSize.width > originalSize.height {
            scale = min(maxDimension / originalSize.width, 1.0)
        } else {
            scale = min(maxDimension / originalSize.height, 1.0)
        }
        
        let newSize = NSSize(width: originalSize.width * scale, height: originalSize.height * scale)
        print("üìè –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(Int(newSize.width))x\(Int(newSize.height))")
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        let resizedImage = NSImage(size: newSize)
        resizedImage.lockFocus()
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        NSGraphicsContext.current?.imageInterpolation = .high
        image.draw(in: NSRect(origin: .zero, size: newSize))
        
        resizedImage.unlockFocus()
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        saveCompressedDebugScreenshot(resizedImage, filename: "debug_compressed_window.jpg")
        
        return resizedImage
    }
    
    private func saveCompressedDebugScreenshot(_ image: NSImage, filename: String) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG —Å —Å–∂–∞—Ç–∏–µ–º
        guard let tiffData = image.tiffRepresentation,
              let bitmapRep = NSBitmapImageRep(data: tiffData) else {
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–∂–∞—Ç–∏—è")
            return
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º JPEG —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 0.7 (—Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º)
        let compressionProperties: [NSBitmapImageRep.PropertyKey: Any] = [
            .compressionFactor: 0.7
        ]
        
        guard let jpegData = bitmapRep.representation(using: .jpeg, properties: compressionProperties) else {
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å JPEG –¥–∞–Ω–Ω—ã–µ")
            return
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        let fileURL = URL(fileURLWithPath: FileManager.default.currentDirectoryPath)
            .appendingPathComponent(filename)
        
        do {
            try jpegData.write(to: fileURL)
            let sizeKB = jpegData.count / 1024
            print("üóúÔ∏è –°–∂–∞—Ç—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: \(fileURL.path) (\(sizeKB)KB)")
        } catch {
            print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∂–∞—Ç–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: \(error)")
        }
    }
    
}
