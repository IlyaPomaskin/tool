import Foundation
import OpenAI

class OpenAIService: @unchecked Sendable {
    // OpenAI –∫–ª–∏–µ–Ω—Ç
    private var openAI: OpenAI?
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ responseId
    private var previousResponseId: String?
    
    
    init() {
        setupOpenAI()
    }
    
    private func setupOpenAI() {
        // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder
        let apiKey = ProcessInfo.processInfo.environment["OPENAI_API_KEY"] ?? "your-api-key-here"
        
        if apiKey != "your-api-key-here" {
            openAI = OpenAI(apiToken: apiKey)
            print("OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        } else {
            print("‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        }
    }
    
    func transcribeAudio(from fileURL: URL) async throws -> String {
        guard let openAI = openAI else {
            throw NSError(domain: "OpenAIService", code: 1, userInfo: [NSLocalizedDescriptionKey: "OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"])
        }
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
        let audioData = try Data(contentsOf: fileURL)
        print("–ü—Ä–æ—á–∏—Ç–∞–Ω —Ñ–∞–π–ª: \(fileURL.path) (\(audioData.count) –±–∞–π—Ç)")
        
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º M4A –∞—É–¥–∏–æ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        let query = AudioTranscriptionQuery(
            file: audioData,
            fileType: .m4a,
            model: .whisper_1,
            language: "ru" // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
        )
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        let transcription = try await openAI.audioTranscriptions(query: query)
        print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: \(transcription.text)")
        
        return transcription.text
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ ResponseAPI
    func callResponseAPI(with transcription: String) async throws -> String {
        guard let openAI = openAI else {
            throw NSError(domain: "OpenAIService", code: 2, userInfo: [NSLocalizedDescriptionKey: "OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"])
        }
        
        print("ü§ñ –í—ã–∑—ã–≤–∞–µ–º ResponseAPI —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π: \(transcription)")
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ ResponseAPI
        let query = CreateModelResponseQuery(
            input: .textInput(transcription),
            model: .gpt5_mini,
            instructions: "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
            previousResponseId: previousResponseId
        )
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        let response = try await openAI.responses.createResponse(query: query)
        let responseText = getResponseText(from: response)
        print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: \(responseText)")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º responseId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
        previousResponseId = response.id
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω responseId: \(response.id)")
        
        return responseText
    }

    private func getResponseText(from response: ResponseObject) -> String {
        var allTexts: [String] = []
        
        for output in response.output {
            switch output {
            case .outputMessage(let outputMessage):
                for content in outputMessage.content {
                    switch content {
                    case .OutputTextContent(let textContent):
                        allTexts.append(textContent.text)
                    case .RefusalContent(let refusalContent):
                        print("–û—Ç–∫–∞–∑: \(refusalContent.refusal)")
                    }
                }
            default:
                print("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø –≤—ã–≤–æ–¥–∞")
            }
        }
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        return allTexts.isEmpty ? "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞" : allTexts.joined(separator: " ")
    }
}
